<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>waku-application on Vac RFC</title>
    <link>https://rfc.vac.dev/tags/waku-application/</link>
    <description>Recent content in waku-application on Vac RFC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://rfc.vac.dev/tags/waku-application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20/TOY-ETH-PM</title>
      <link>https://rfc.vac.dev/spec/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/20/</guid>
      <description>Content Topics:
Public Key Broadcast: /eth-pm/1/public-key/proto, Private Message: /eth-pm/1/private-message/proto. This specification explains the Toy Ethereum Private Message protocol which enables a peer to send an encrypted message to another peer using the Waku v2 network, and the peer&amp;rsquo;s Ethereum address.
The main purpose of this specification is to demonstrate how Waku v2 can be used for encrypted messaging purposes, using Ethereum accounts for identity. This protocol caters for Web3 wallets restrictions, allowing it to be implemented only using standard Web3 API.</description>
    </item>
    
    <item>
      <title>22/TOY-CHAT</title>
      <link>https://rfc.vac.dev/spec/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/22/</guid>
      <description>Content Topic: /toy-chat/2/huilong/proto.
This specification explains a toy chat example using Waku v2. This protocol is mainly used to:
Dogfood Waku v2, Show an example of how to use Waku v2. Currently, all main Waku v2 implementations support the toy chat protocol: nim-waku, js-waku (NodeJS and web) and go-waku.
Note that this is completely separate from the protocol the Status app is using for its chat functionality.
Design # The chat protocol enables sending and receiving messages in a chat room.</description>
    </item>
    
    <item>
      <title>24/STATUS-CURATION</title>
      <link>https://rfc.vac.dev/spec/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/24/</guid>
      <description>This spec is a proposition for a voting protocol over Waku V2.
Motivation # In open p2p protocol there is an issue with voting off-chain as there is much room for malicious peers to only include votes that support their case when submitting votes to chain.
Proposed solution is to aggregate votes over waku and allow users to submit votes to smart contract that aren&amp;rsquo;t already submitted.
Smart contract # Voting should be finalized on chain so that the finished vote is immutable.</description>
    </item>
    
    <item>
      <title>28/STATUS-FEATURING</title>
      <link>https://rfc.vac.dev/spec/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/28/</guid>
      <description>This spec is a proposition of voting on community featuring over waku v2.
Overview # When there is a active community that is seeking new members, current users of community should be able to feature their community so that it will be accessible to larger audience. Status community curation DApp should provide such a tool.
Rules of featuring: - Given community can&amp;rsquo;t be featured twice in a row. - Only one vote per user per community (single user can vote on multiple communities) - Voting will be done off-chain - If community hasn&amp;rsquo;t been featured votes for given community are still valid for the next 4 weeks</description>
    </item>
    
    <item>
      <title>53/WAKU2-X3DH</title>
      <link>https://rfc.vac.dev/spec/53/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/53/</guid>
      <description>Abstract # This document describes a method that can be used to provide a secure channel between two peers, and thus provide confidentiality, integrity, authenticity and forward secrecy. It is transport-agnostic and works over asynchronous networks.
It builds on the X3DH and Double Ratchet specifications, with some adaptations to operate in a decentralized environment.
Motivation # Nodes on a network may want to communicate with each other in a secure manner, without other nodes network being able to read their messages.</description>
    </item>
    
    <item>
      <title>54/WAKU2-X3DH-SESSIONS</title>
      <link>https://rfc.vac.dev/spec/54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/54/</guid>
      <description>Abstract # This document specifies how to manage sessions based on an X3DH key exchange. This includes how to establish new sessions, how to re-establish them, how to maintain them, and how to close them.
53/WAKU2-X3DH specifies the Waku X3DH protocol for end-to-end encryption. Once two peers complete an X3DH handshake, they SHOULD establish an X3DH session.
Session Establishment # A node identifies a peer by their installation-id which MAY be interpreted as a device identifier.</description>
    </item>
    
    <item>
      <title>55/STATUS-1TO1-CHAT</title>
      <link>https://rfc.vac.dev/spec/55/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/55/</guid>
      <description>Abstract # This specification describes how the Status 1-to-1 chat protocol is implemented on top of the Waku v2 protocol. This protocol can be used to send messages to a single recipient.
Background # This document describes how 2 peers communicate with each other to send messages in a 1-to-1 chat, with privacy and authenticity guarantees.
Specification # Overview # This protocol MAY use any key-exchange mechanism previously discussed -</description>
    </item>
    
    <item>
      <title>56/STATUS-COMMUNITIES</title>
      <link>https://rfc.vac.dev/spec/56/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rfc.vac.dev/spec/56/</guid>
      <description>Abstract # This document describes the design of Status Communities over Waku v2, allowing for multiple users to communicate in a group chat. This is a key feature for the Status messaging app.
Background and Motivation # The purpose of Status communities, as specified in this document, is allowing for large group chats. Communities can have further substructure, e.g. specific channels.
Smaller group chats, on the other hand, are out of scope for this document and can be built over 55/STATUS-1TO1-CHAT.</description>
    </item>
    
  </channel>
</rss>
